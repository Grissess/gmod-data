#ifndef SELENE_PMALLOC
#define SELENE_PMALLOC

#include <selene/std.txt>
#include <selene/cpu.txt>
#include <selene/printk.txt>

#define STACK_PAGES 4

char *pg_round(char *addr) {
    return PAGESIZE * to_int(addr >> PAGEBITS);
}

char *pg_roundup(char *addr) {
    return PAGESIZE * to_int((addr + PAGESIZE - 1) >> PAGEBITS);
}

char *pmalloc_top = NULL;

void pfree(char *addr) {
    char *pg = pg_round(addr);
    *pg = pmalloc_top;
    pmalloc_top = pg;
}

char pfreerange(char *start, char *end) {
    char num = 0;
    char *cur = pg_round(start);
    char *stop = pg_round(end);
    if(cur != start) cur += PAGESIZE;
    while(cur < stop) {
        pfree(cur);
        cur += PAGESIZE;
        num++;
    }
    return num
}

char *pmalloc() {
    if(!pmalloc_top) return 0;
    char *pg = pmalloc_top;
    pmalloc_top = *pmalloc_top;
    return pg;
}

void pmalloc_init(char *endtext) {
    char *emem = insn_cpuid(CPUID_RAMSIZE) - PAGESIZE * STACK_PAGES;
    debug_printkln("pmalloc_init\n");
    printkln("%d free pages in main memory\n", pfreerange(endtext, emem));
}

#endif

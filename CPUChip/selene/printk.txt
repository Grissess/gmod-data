#ifndef SELENE_PRINTK
#define SELENE_PRINTK

#include <selene/dev.txt>
#include <selene/cpu.txt>
#include <selene/std.txt>

char *printk_console = 0;
char printk_width = 0;
char printk_height = 0;

void printk_init() {
    printk_find();
}

void printk_reset() {
    printk_console[CNS_CLEAR_SCREEN] = 1;
    printk_console[CNS_CURSOR_POSITION] = 0;
    printk_width = printk_console[CNS_HIGH_SHIFT_COL] - printk_console[CNS_LOW_SHIFT_COL] + 1;
    printk_height = printk_console[CNS_HIGH_SHIFT_ROW] - printk_console[CNS_LOW_SHIFT_ROW] + 1;
}

void printk_find() {
    char *root = insn_cpuid(CPUID_RAMSIZE);
    char i;
    
    root[EBUS_REG_RECURSE] = 0;
    root[EBUS_REG_SCAN] = 1;
    for(i = 0; i < EBUS_DEVICES; i++) {
        if(root[EBUS_REG_DEVTYPE + i] == EBUS_TYPE_CONSOLE) {
            root[2 * i] = EBUS_SIZE;
            root[2 * i + 1] = EBUS_SIZE + CNS_SIZE;
            printk_console = root + EBUS_SIZE;
            printk_reset();
            printk("early printk on device %p\n", i);
            return;
        }
    }
    
    printk_console = root;
    printk_reset();
    printk("early printk assumed on root device\n");
}

void putck(char c) {
    char pos = to_int(printk_console[CNS_CURSOR_POSITION] / 2);
    if(c == '\n') {
        pos += printk_width;
        // XXX || operator is bugged, but this should be merged below
        pos = to_int(pos / printk_width);
        pos *= printk_width;
    } else if(c == '\r') {
        pos = to_int(pos / printk_width);
        pos *= printk_width;
    } else if(c == '\b') {
        pos--;
    } else {
        printk_console[pos * 2] = c;
        printk_console[pos * 2 + 1] = 999;
        pos++;
    }
    if(pos >= printk_width * printk_height) {
        printk_console[CNS_SHIFT_ROWS] = 1;
        pos -= printk_width;
    }
    printk_console[CNS_CURSOR_POSITION] = pos * 2;
}

void putsk(char *s) {
    while(*s) {
        putck(*s);
        s++;
    }
}

char printk_itoa_buffer[32];
void putik(char n, char *radix) {
    itoa(n, radix, printk_itoa_buffer);
    putsk(printk_itoa_buffer);
}

void printk(char *str, ...) {
    char *s = str;
    char *arg = EBP + 3;
    while(*s) {
        if(*s == '%') {
            s++;
            if(s == 'p' || s == 'x') {
                putik(*arg, "0123456789abcdef");
                arg++;
            } else if(s == 'X') {
                putik(*arg, "0123456789ABCDEF");
                arg++;
            } else if(s == 'd') {
                putik(*arg, "0123456789");
                arg++;
            } else if(s == 'o') {
                putik(*arg, "01234567");
                arg++;
            } else if(s == 'b') {
                putik(*arg, "01");
                arg++;
            } else if(s == 'c') {
                putck(*arg);
                arg++;
            } else if(s == 's') {
                putsk(*arg);
                arg++;
            } else {
                putck(*s);
            }
        } else {
            putck(*s);
        }
        s++;
    }
}

#endif

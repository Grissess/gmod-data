//LunOS -- Lunar Operating System
//mm -- Memory Management

#ifndef LUNOS_MM
#define LUNOS_MM

#include <lunos/error.txt>

//LunOS uses a rather naive method of managing memory that I shall elaborate on here. Despite being rather
//naive, it should still remain quite fast.

//The memory manager is self-contained inside a single structure, the MMI (Memory Manager Information)
//structure. This structure should start out zeroed, and it should be initialized from KMInit() and that
//function ONLY. The structure should be treated as opaque.

//The manager works with the following information:
//-It works in terms of pages. When memory is requested, every page therein is scanned for some free
// memory. If it has enough, the page's refcount goes up, and that amount of memory is allocated.
// Note that the memory usage in a page never actually goes down until the refcount is set to 0--at
// which point the entire page is freed.
//-The range you give to MMInit is inclusive, and will include some memory reserved for administration
// structures. The structures will not include self-referential pages--the MMI structure is smart
// enough to know not to include that.
//-Memory pages have a tag and a disposition. The tag has a kernel-assigned meaning--typically,
// positive numbers are PIDs, and all other (non-positive) numbers are reserved. 0 is assigned to
// all pages on init and free, and generally represents generic kernel memory. Disposition is just
// a hint to the system as to what the memory will be used for--and usually drives the RWX policies
// for that page, but those policies are actually independent.

//Actually allocating and deallocating occurs through MMAlloc and MMFree (and friends), which expect 
//the MMI. However, instead of providing an address directly, both work on a two byte structure called
//a "buffer cell" which is expected to be statically
//allocated by the code (or on the stack). This is required because the size of the allocated region
//must be retained for this algorithm to function reliably (especially when performing multi-page
//allocations). Accessing the memory that was allocated can be done through the buffer cell's first
//member, a real pointer to the allocated memory somewhere inside the MMI's arena.

#define MF_DISABLE 1
//Disables the page--accesses to it fail with an IO fault (INT 7).
#define MF_REMAP 2
//Causes access to the page to remap to another physical page (no further mapping is done).
//The target page is specified by the second byte of the two-byte page entry.
#define MF_TRAP 4
//Says it will raise a page trap (INT 30), but doesn't actually appear to. Bug?
#define MF_OVERRIDE 8
//Sets the MEMRQ register (see regs.txt), and raises INT 29 for reading or INT 30 for writing.
//On reading, the actually returned data will be whatever is in the LADD register (which may be
//set with CPUSET). This requires two calls into the read/write for the same memory bus, so
//using it is pretty damned slow and thereby discouraged.
#define MF_NOREAD 32
//Causes a read access violation (INT 12) when an attempt is made to read.
#define MF_NOWRITE 64
//Causes a write access violation (INT 9) when an attempt is made to write.
#define MF_NOEXEC 128
//Cause an execution access violation (INT 14) when an attempt is made to execute (from runlevel!=0).

#define MF_SH_RUNLEVEL 8
//How far to right-shift the flags to get the (unmasked) runlevel.
#define MF_MK_RUNLEVEL 255
//The AND mask to apply to the resulting shift to get the runlevel.

#define PTE_FLAGS 0
//ZVM PTBL flags (see MF_* above) as well as the runlevel (MF_*_RUNLEVEL).
#define PTE_REMAP 1
//Page to remap access to (if MF_REMAP is set).
#define PTE_SZ 2

#define PAGE_SIZE 128
#define PAGE_SHIFT 7
//...which is log2(128), of course.

//The actual PAST contains this header...
#define PAST_ENTRIES 0
//Number of entries in the PAST.
#define PAST_ROOT 1
//Page number of the first page represented in the PAST, as relative to all virtual memory
//(this permits shrinking the table to cover a partial region of upper memory, which the ZVM PTBL
//can't do as of this writing).
#define PAST_SZ 2

//...which is then followed by PAST_ENTRIES number of these Page Administration Structures.
#define PAS_USED 0
//How many bytes are used (in [0, PAGE_SIZE]).
#define PAS_REFCNT 1
//References held into this page, incremented on alloc, decremented on free.
#define PAS_TAG 2
//A tag byte to be used by whomever needs additional info on this page (usually the kernel).
#define PAS_DISPOS 3
//The page disposition (see DISPOS_*), indicating the alleged use of this page.
#define PAS_SZ 4

#define MMI_ARENA 0
//Pointer to the start of the arena--where memory is actually allocated from
#define MMI_ARENASIZE 1
//Size of the arena.
#define MMI_PTBL 2
//Pointer to the start of the ZVM page table.
#define MMI_PAST 3
//Pointer to the page administration [structure] table, where heap structure information is stored.
#define MMI_FLAGS 4
//Some flags
#define MMI_SZ 5

#define MMIF_NOPTBL 1
//Do not set MMI_PTBL--this allocator should not maintain a ZVM page table. Useful for non-kernel use.

#define DISPOS_GENERIC 0
//No particular disposition, RWX.
#define DISPOS_DATA 1
//Allocated as heap or buffer space, RW.
#define DISPOS_CODE 2
//Allocated for program code, RX.
#define DISPOS_RODATA 3
//Allocated as read-only data (usually set later, or used by the kernel), R.
#define DISPOS_STACK 4
//Allocated as stack space, RW.
#define DISPOS_MMAP 5
//Allocated as mapped memory, RW. (This is also usually tagged differently, since it's not
//process-local.)

#define BC_SPACE 0
//Pointer to allocated region.
#define BC_SIZE 1
//Size of allocated region.
#define BC_SZ 2

char MMToPage(char *addr) {
    return addr>>PAGE_SHIFT;
}

char *MMPageAddr(char page) {
    return page<<PAGE_SHIFT;
}

char MMInit(char *mmi, char *region, char size, char flags) {
    char sz=0;
    char pages;
    char firstpage;
    char *current=region;
    char *end=region+size;
    mmi[MMI_FLAGS]=flags;
    pages=MMToPage(size);
    firstpage=MMToPage(region);
    //Place and initialize the PAST.
    sz=PAST_SZ+PAS_SZ*pages;
    mmi[MMI_PAST]=current;
    current[PAST_ENTRIES]=pages;
    current[PAST_ROOT]=firstpage;
    current+=sz;
    if(current>end) {
        return ENOMEM;
    }
    //Place and initialize the PTBL.
    
    
    
#endif
